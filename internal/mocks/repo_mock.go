// Code generated by MockGen. DO NOT EDIT.
// Source: ./repo/repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/denlipov/com-request-api/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// CreateRequest mocks base method.
func (m *MockRepo) CreateRequest(ctx context.Context, req model.Request) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRequest", ctx, req)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRequest indicates an expected call of CreateRequest.
func (mr *MockRepoMockRecorder) CreateRequest(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRequest", reflect.TypeOf((*MockRepo)(nil).CreateRequest), ctx, req)
}

// DescribeRequest mocks base method.
func (m *MockRepo) DescribeRequest(ctx context.Context, requestID uint64) (*model.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRequest", ctx, requestID)
	ret0, _ := ret[0].(*model.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRequest indicates an expected call of DescribeRequest.
func (mr *MockRepoMockRecorder) DescribeRequest(ctx, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRequest", reflect.TypeOf((*MockRepo)(nil).DescribeRequest), ctx, requestID)
}

// ListRequest mocks base method.
func (m *MockRepo) ListRequest(ctx context.Context, limit, offset uint64) ([]model.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRequest", ctx, limit, offset)
	ret0, _ := ret[0].([]model.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRequest indicates an expected call of ListRequest.
func (mr *MockRepoMockRecorder) ListRequest(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRequest", reflect.TypeOf((*MockRepo)(nil).ListRequest), ctx, limit, offset)
}

// RemoveRequest mocks base method.
func (m *MockRepo) RemoveRequest(ctx context.Context, requestID uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRequest", ctx, requestID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRequest indicates an expected call of RemoveRequest.
func (mr *MockRepoMockRecorder) RemoveRequest(ctx, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRequest", reflect.TypeOf((*MockRepo)(nil).RemoveRequest), ctx, requestID)
}

// UpdateRequest mocks base method.
func (m *MockRepo) UpdateRequest(ctx context.Context, req model.Request) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRequest", ctx, req)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRequest indicates an expected call of UpdateRequest.
func (mr *MockRepoMockRecorder) UpdateRequest(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRequest", reflect.TypeOf((*MockRepo)(nil).UpdateRequest), ctx, req)
}
